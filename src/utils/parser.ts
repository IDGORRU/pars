import axios from 'axios';
import * as cheerio from 'cheerio';
import { JSDOM } from 'jsdom';

export interface ParseResult {
  emails?: Array<{ email: string; source: string }>;
  links?: Array<{ url: string; text: string }>;
  data?: Array<{ title: string; content: string }>;
  html?: Array<{ tag: string; content: string }>;
}

export class HTMLParser {
  private proxyUrl?: string;

  constructor(proxyUrl?: string) {
    this.proxyUrl = proxyUrl;
  }

  private async fetchPage(url: string): Promise<string> {
    try {
      const config: any = {
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
      };

      if (this.proxyUrl) {
        const proxyParts = this.proxyUrl.replace('http://', '').split(':');
        config.proxy = {
          host: proxyParts[0],
          port: parseInt(proxyParts[1]) || 8080
        };
      }

      const response = await axios.get(url, config);
      return response.data;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error}`);
    }
  }

  async parseEmails(url: string, onProgress?: (message: string) => void): Promise<Array<{ email: string; source: string }>> {
    onProgress?.('üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    const html = await this.fetchPage(url);
    
    onProgress?.('üîç –ü–æ–∏—Å–∫ email –∞–¥—Ä–µ—Å–æ–≤...');
    const $ = cheerio.load(html);
    const emails = new Set<string>();
    const results: Array<{ email: string; source: string }> = [];

    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ email
    const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g;

    // –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ
    const pageText = $.text();
    const textEmails = pageText.match(emailRegex) || [];
    
    textEmails.forEach(email => {
      if (!emails.has(email.toLowerCase())) {
        emails.add(email.toLowerCase());
        results.push({ email, source: '–¢–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã' });
      }
    });

    // –ü–æ–∏—Å–∫ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö href
    $('a[href^="mailto:"]').each((_, element) => {
      const href = $(element).attr('href');
      if (href) {
        const email = href.replace('mailto:', '').split('?')[0];
        if (!emails.has(email.toLowerCase())) {
          emails.add(email.toLowerCase());
          results.push({ email, source: '–°—Å—ã–ª–∫–∞ mailto' });
        }
      }
    });

    // –ü–æ–∏—Å–∫ –≤ –º–µ—Ç–∞-—Ç–µ–≥–∞—Ö
    $('meta').each((_, element) => {
      const content = $(element).attr('content') || '';
      const metaEmails = content.match(emailRegex) || [];
      metaEmails.forEach(email => {
        if (!emails.has(email.toLowerCase())) {
          emails.add(email.toLowerCase());
          results.push({ email, source: '–ú–µ—Ç–∞-—Ç–µ–≥–∏' });
        }
      });
    });

    onProgress?.(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} email –∞–¥—Ä–µ—Å–æ–≤`);
    return results;
  }

  async parseLinks(url: string, onProgress?: (message: string) => void): Promise<Array<{ url: string; text: string }>> {
    onProgress?.('üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    const html = await this.fetchPage(url);
    
    onProgress?.('üîó –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫...');
    const $ = cheerio.load(html);
    const results: Array<{ url: string; text: string }> = [];
    const baseUrl = new URL(url);

    $('a[href]').each((_, element) => {
      const href = $(element).attr('href');
      const text = $(element).text().trim();
      
      if (href && text) {
        try {
          let fullUrl = href;
          if (href.startsWith('/')) {
            fullUrl = `${baseUrl.protocol}//${baseUrl.host}${href}`;
          } else if (!href.startsWith('http')) {
            fullUrl = `${baseUrl.protocol}//${baseUrl.host}/${href}`;
          }
          
          results.push({ url: fullUrl, text });
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ URL
        }
      }
    });

    onProgress?.(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —Å—Å—ã–ª–æ–∫`);
    return results;
  }

  async parseData(url: string, onProgress?: (message: string) => void): Promise<Array<{ title: string; content: string }>> {
    onProgress?.('üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    const html = await this.fetchPage(url);
    
    onProgress?.('üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    const $ = cheerio.load(html);
    const results: Array<{ title: string; content: string }> = [];

    // –¢–µ–ª–µ—Ñ–æ–Ω—ã
    const phoneRegex = /(\+7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}/g;
    const pageText = $.text();
    const phones = pageText.match(phoneRegex) || [];
    phones.forEach(phone => {
      results.push({ title: '–¢–µ–ª–µ—Ñ–æ–Ω', content: phone.trim() });
    });

    // Email (–¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
    const emailRegex = /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g;
    const emails = pageText.match(emailRegex) || [];
    emails.forEach(email => {
      results.push({ title: 'Email', content: email });
    });

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    $('h1, h2, h3').each((_, element) => {
      const text = $(element).text().trim();
      if (text) {
        results.push({ title: `–ó–∞–≥–æ–ª–æ–≤–æ–∫ ${element.tagName.toUpperCase()}`, content: text });
      }
    });

    // –¶–µ–Ω—ã (—Ä—É–±–ª–∏)
    const priceRegex = /(\d+[\s,]?\d*)\s?(—Ä—É–±|‚ÇΩ|—Ä—É–±–ª–µ–π?)/gi;
    const prices = pageText.match(priceRegex) || [];
    prices.forEach(price => {
      results.push({ title: '–¶–µ–Ω–∞', content: price.trim() });
    });

    onProgress?.(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${results.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö`);
    return results;
  }

  async parseHTML(url: string, onProgress?: (message: string) => void): Promise<Array<{ tag: string; content: string }>> {
    onProgress?.('üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    const html = await this.fetchPage(url);
    
    onProgress?.('üè∑Ô∏è –ê–Ω–∞–ª–∏–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
    const $ = cheerio.load(html);
    const results: Array<{ tag: string; content: string }> = [];

    // Title
    const title = $('title').text().trim();
    if (title) {
      results.push({ tag: '<title>', content: title });
    }

    // Meta description
    const metaDesc = $('meta[name="description"]').attr('content');
    if (metaDesc) {
      results.push({ tag: '<meta description>', content: metaDesc });
    }

    // Meta keywords
    const metaKeywords = $('meta[name="keywords"]').attr('content');
    if (metaKeywords) {
      results.push({ tag: '<meta keywords>', content: metaKeywords });
    }

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    $('h1, h2, h3, h4, h5, h6').each((_, element) => {
      const text = $(element).text().trim();
      if (text) {
        results.push({ tag: `<${element.tagName.toLowerCase()}>`, content: text });
      }
    });

    // –í–∞–∂–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã (–ø–µ—Ä–≤—ã–µ 10)
    $('p').slice(0, 10).each((_, element) => {
      const text = $(element).text().trim();
      if (text && text.length > 20) {
        results.push({ tag: '<p>', content: text.substring(0, 200) + (text.length > 200 ? '...' : '') });
      }
    });

    onProgress?.(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    return results;
  }
}